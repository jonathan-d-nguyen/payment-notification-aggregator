AWSTemplateFormatVersion: '2010-09-09'  # Fixed property name
Description: 'Setup for receiving emails with SES and triggering Lambda'

Resources:
  # S3 Bucket to store incoming emails
  EmailBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-incoming-emails'
      # Adding recommended security settings
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      
  # Lambda function to process emails
  EmailProcessorFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const s3Event = event.Records[0].s3;
            console.log('Processing email from bucket:', s3Event.bucket.name);
            console.log('Email object key:', s3Event.object.key);
            // Add your email processing logic here
            return {
              statusCode: 200,
              body: 'Email processed successfully'
            };
          };
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          BUCKET_NAME: !Ref EmailBucket
      
  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub '${EmailBucket.Arn}/*'
                
  # S3 Bucket Policy to allow SES to write emails
  EmailBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref EmailBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub '${EmailBucket.Arn}/*'
            Condition:
              StringEquals:
                'aws:Referer': !Ref 'AWS::AccountId'

Outputs:
  BucketName:
    Description: 'Name of the S3 bucket created for emails'
    Value: !Ref EmailBucket
  LambdaFunctionArn:
    Description: 'ARN of the Lambda function'
    Value: !GetAtt EmailProcessorFunction.Arn

